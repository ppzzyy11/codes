class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(nums.size()==0) return 0;
        vector<int> dp(nums.size(),1);

        dp[0]=1;
        for(int i=1;i<nums.size();i++)
        {
            int Max=INT_MIN;
            for(int j=0;j<i;j++)
            {
                if(nums[j]<nums[i])
                {
                    Max=max(Max,dp[j]);
                }
            }
            if(Max!=INT_MIN)
            {
                dp[i]=Max+1;
            }
        }


//construct Longest Increasing Subsequence
        int res=INT_MIN;
        for(int i=0;i<dp.size();i++)
        {res=max(res,dp[i]);}
        int cnt=res;
        stack<int> st;
        for(int i=dp.size()-1;i>=0;i--)
        {
            if(dp[i]==cnt)
            {
                cnt--;
                st.push(nums[i]);
            }
        }
        while(st.size())
        {
            cout<<st.top()<<" ";
            st.pop();
        }




        return res;
    }
};
