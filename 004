class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m=nums1.size(),n=nums2.size();
        if(m>n) return findMedianSortedArrays(nums2,nums1);
        if(m==0) return (double)(nums2[(n-1)/2]+nums2[n/2])/2.0;
        int l=0,r=m;//ATTENTION!!!!! r=m
        int i,j,halflen=(m+n+1)>>1;
        while(l<=r)
        {
            i=(l+r)>>1;
            j=halflen-i;
            if(j>0&&i<r&&nums2[j-1]>nums1[i]) l=i+1;
            else if(i>l&&j<n&&nums1[i-1]>nums2[j]) r=i-1;
            else
            {
                int MaxLeft;
                if(i==0) MaxLeft=nums2[j-1];
                else if(j==0) MaxLeft=nums1[i-1];
                else MaxLeft=max(nums1[i-1],nums2[j-1]);
                if( (n+m)%2==1 ) return MaxLeft;
                int MinRight;
                if(i==m) MinRight=nums2[j];
                else if(j==n) MinRight=nums1[i];
                else MinRight=min(nums1[i],nums2[j]);
                return (double)(MaxLeft+MinRight)/2.0;
            }
        }
        return -1;
    }
};
