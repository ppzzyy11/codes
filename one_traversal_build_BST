#include<iostream>
#include<stack>
#include<vector>
#include<string>
#include<climits>
#include<unordered_map>
#include<unordered_set>
#include<cmath>
#include<climits>

using namespace std;


struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};



struct TreeNode
{
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x):val(x),left(NULL),right(NULL){}
};

void inorderTraversal(TreeNode* root)
{
    if(root==NULL) return ;
    inorderTraversal(root->left);
    cout<<root->val<<" ";
    inorderTraversal(root->right);
}

void preorderTraversal(TreeNode* root)
{
    if(root==NULL) return ;
    cout<<root->val<<" ";
    inorderTraversal(root->left);
    inorderTraversal(root->right);
}
void postorderTraversal(TreeNode* root)
{
    if(root==NULL) return ;
    inorderTraversal(root->left);
    inorderTraversal(root->right);
    cout<<root->val<<" ";
}
struct TreeNode* constructTree(const vector<int> & pre)
{
    stack<TreeNode*> st;
    TreeNode *node =NULL;
    for(int i=0;i<pre.size();i++)
    {
        if(i==0)
        {
            node=new TreeNode(pre[i]);
            st.push(node);
        }else if(st.top()->val>pre[i])
        {
            st.top()->left= new TreeNode(pre[i]);
            st.push(st.top()->left);
        }else
        {
            TreeNode* pop=NULL;
            while(!st.empty()&&st.top()->val<pre[i])
            {
                pop=st.top();
                st.pop();
            }
            pop->right=new TreeNode(pre[i]);
            st.push(pop->right);
        }
    }
    return node;
}
struct TreeNode* constructTree(const vector<int> & pre,int &index,int Min,int Max)
{
    if(index>=pre.size()) return NULL;

    struct TreeNode* node=NULL;
    int key=pre[index];
    if(key<Max&&key>Min)
    {
        index++;
        node= new TreeNode(key);
        node->left= constructTree(pre,index,Min,key);
        node->right= constructTree(pre,index,key,Max);

    }
    return node;
}


int main()
{
    vector<int> pre={10,5,1,7,40,50};
    int index=0;
    TreeNode* root= constructTree(pre);
    inorderTraversal(root);
    cout<<endl;
    preorderTraversal(root);
    return 0;
}
