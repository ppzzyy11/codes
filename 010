class Solution {
public:
    bool isMatch(string s, string p) {
        if(s.size()==0) return EqualEmpty(p,p.size()-1);
        dp.resize(s.size(),vector<int>(p.size(),-1));
        return Recur(s,p,s.size()-1,p.size()-1);
    }
private:
    bool Recur(const string &s,const string &p,int i,int j)
    {
        if(i==-1&&j==-1) return 1;
        if(i==-1) return EqualEmpty(p,j);
        if(j==-1) return 0;

        if(dp[i][j]!=-1) return dp[i][j];
        if(s[i]==p[j]||p[j]=='.') return dp[i][j]=Recur(s,p,i-1,j-1);
        if(p[j]=='*'&&(p[j-1]==s[i]||p[j-1]=='.')) return dp[i][j]=(Recur(s,p,i-1,j-2)||Recur(s,p,i-1,j)||Recur(s,p,i,j-2));
        if(p[j]=='*') return dp[i][j]=Recur(s,p,i,j-2);
        return dp[i][j]=0;
    }
    vector<vector<int>> dp;
    bool EqualEmpty(const string& str,int i)
    {
        if(str.size()==0) return 1;
        if(i==0) return 0;
        if(i<0) return 0;
        if(str[i]=='*')
        {
            if(i==1) return 1;
            else return EqualEmpty(str,i-2);
        }else return 0;
    }
};
